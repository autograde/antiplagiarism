// Code generated by protoc-gen-go.
// source: ap.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	ap.proto

It has these top-level messages:
	ApRequest
	ApResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type ApRequest struct {
	GithubOrg    string   `protobuf:"bytes,1,opt,name=githubOrg" json:"githubOrg,omitempty"`
	GithubToken  string   `protobuf:"bytes,2,opt,name=githubToken" json:"githubToken,omitempty"`
	StudentRepos []string `protobuf:"bytes,3,rep,name=studentRepos" json:"studentRepos,omitempty"`
	LabNames     []string `protobuf:"bytes,4,rep,name=labNames" json:"labNames,omitempty"`
	LabLanguages []int32  `protobuf:"varint,5,rep,name=labLanguages" json:"labLanguages,omitempty"`
}

func (m *ApRequest) Reset()         { *m = ApRequest{} }
func (m *ApRequest) String() string { return proto1.CompactTextString(m) }
func (*ApRequest) ProtoMessage()    {}

type ApResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Err     string `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *ApResponse) Reset()         { *m = ApResponse{} }
func (m *ApResponse) String() string { return proto1.CompactTextString(m) }
func (*ApResponse) ProtoMessage()    {}

// Client API for Ap service

type ApClient interface {
	CheckPlagiarism(ctx context.Context, in *ApRequest, opts ...grpc.CallOption) (*ApResponse, error)
}

type apClient struct {
	cc *grpc.ClientConn
}

func NewApClient(cc *grpc.ClientConn) ApClient {
	return &apClient{cc}
}

func (c *apClient) CheckPlagiarism(ctx context.Context, in *ApRequest, opts ...grpc.CallOption) (*ApResponse, error) {
	out := new(ApResponse)
	err := grpc.Invoke(ctx, "/proto.Ap/CheckPlagiarism", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ap service

type ApServer interface {
	CheckPlagiarism(context.Context, *ApRequest) (*ApResponse, error)
}

func RegisterApServer(s *grpc.Server, srv ApServer) {
	s.RegisterService(&_Ap_serviceDesc, srv)
}

func _Ap_CheckPlagiarism_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ApRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ApServer).CheckPlagiarism(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Ap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Ap",
	HandlerType: (*ApServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPlagiarism",
			Handler:    _Ap_CheckPlagiarism_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
